{"mappings":"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","sources":["./src/components/utils.js","./src/components/text-field.js","./src/components/check-list.js","./src/components/complete.js","./src/components/match.js","./src/components/progress.js","./src/components/quiz-section.js","./src/quiz.js"],"sourcesContent":["/**\r\n * \r\n * @param {string} str \r\n * @returns {HTMLElement}\r\n */\r\n\r\nexport function createElementFrom(str) {\r\n  /**\r\n   * @type {HTMLTemplateElement}\r\n   */\r\n  const template = document.createElement(\"template\");\r\n  str = str.trim();\r\n  template.innerHTML = str;\r\n  return template.content.firstChild;\r\n}\r\n\r\nexport function genId() {\r\n  return performance.now().toString(36);\r\n}\r\n\r\n\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nclass TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {HTMLElement} $element\r\n   */\r\n  constructor($target, $element, { required, placeholder, value }) {\r\n    this.$element = $element;\r\n    /**\r\n     * @type {HTMLTextAreaElement | HTMLInputElement}\r\n     */\r\n    this.$input = this.$element.querySelector(\"[data-input]\");\r\n\r\n    this.$input.required = required;\r\n    if (placeholder) this.placeholder = placeholder;\r\n    if (value) this.value = value;\r\n\r\n    this.$input.addEventListener(\"focus\", () => {\r\n      this.$element.classList.add(\"has-text\", \"active\");\r\n    });\r\n\r\n    this.$input.addEventListener(\"blur\", () => {\r\n      if (!this.value && !this.placeholder) {\r\n        this.$element.classList.remove(\"has-text\");\r\n      }\r\n      this.$element.classList.remove(\"active\");\r\n      this.onBlur();\r\n    });\r\n\r\n    this.onInput = () => {};\r\n    this.onBlur = () => {};\r\n\r\n    this.$element\r\n      .querySelector(\"[data-input]\")\r\n      .addEventListener(\"input\", () => {\r\n        this.multiline && this._resize();\r\n        this.onInput();\r\n      });\r\n\r\n    $target.replaceWith(this.$element);\r\n  }\r\n\r\n  set value(v) {\r\n    this.$input.value = v;\r\n    if (v) this.$element.classList.add(\"has-text\");\r\n    else this.$element.classList.remove(\"has-text\");\r\n    this.multiline && this._resize();\r\n  }\r\n  get value() {\r\n    return this.$input.value;\r\n  }\r\n  set placeholder(v) {\r\n    this.$input.placeholder = v;\r\n    if (v) this.$element.classList.add(\"has-text\");\r\n    else this.$element.classList.remove(\"has-text\");\r\n  }\r\n  get placeholder() {\r\n    return this.$input.placeholder;\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n    this.$input.scrollIntoView({\r\n      block: \"center\",\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n  blur() {\r\n    this.$input.blur();\r\n  }\r\n\r\n  reportValidity() {\r\n    const valid = this.$input.reportValidity();\r\n    if (!valid)\r\n      this.$input.scrollIntoView({\r\n        block: \"center\",\r\n        behavior: \"smooth\",\r\n      });\r\n    return valid;\r\n  }\r\n}\r\n\r\nexport class OLTextField extends TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  placeholder: string,\r\n   *  value: string,\r\n   *  label: string,\r\n   *  required: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    { placeholder = \"\", value = \"\", label = \"\", required = false }\r\n  ) {\r\n    super(\r\n      $target,\r\n      createElementFrom(`\r\n        <div class=\"ol-text-field\">\r\n          <input class=\"ol-text-field__input\" type=\"text\" data-input />\r\n          ${label ? `<span class=\"ol-text-field__label\">${label}</span>` : \"\"}\r\n        </div>\r\n    `),\r\n      { required, value, placeholder }\r\n    );\r\n  }\r\n}\r\n\r\nexport class ULTextField extends TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  placeholder: string,\r\n   *  value: string,\r\n   *  multiline: boolean,\r\n   *  required: boolean\r\n   *  disableEnter: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    {\r\n      placeholder = \"\",\r\n      value = \"\",\r\n      multiline = false,\r\n      required = false,\r\n      disableEnter = false,\r\n    }\r\n  ) {\r\n    super(\r\n      $target,\r\n      createElementFrom(`\r\n        <div class=\"ul-text-field\">\r\n        ${\r\n          multiline\r\n            ? `<textarea role=\"textbox\" class=\"ul-text-field__input\" data-input ></textarea>`\r\n            : `<input class=\"ul-text-field__input\" type=\"text\" data-input />`\r\n        }\r\n        </div>\r\n    `),\r\n      {\r\n        required,\r\n        placeholder,\r\n      }\r\n    );\r\n    this.multiline = multiline;\r\n    this.value = value;\r\n\r\n    if (this.multiline && disableEnter) {\r\n      this.$input.addEventListener(\"keydown\", (e) => {\r\n        if (e.keyCode == 13) {\r\n          e.preventDefault();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  _resize() {\r\n    const $wrap = createElementFrom(`<div><pre></pre></div>`);\r\n    const $pre = $wrap.querySelector(\"pre\");\r\n    const style = window.getComputedStyle(this.$input);\r\n\r\n    $pre.innerText = this.value + \" \";\r\n    $pre.style.fontSize = style.fontSize;\r\n    $pre.style.fontFamily = style.fontFamily;\r\n    $pre.style.fontWeight = style.fontWeight;\r\n    $wrap.style.width = this.$input.clientWidth + \"px\";\r\n    $pre.style.whiteSpace = \"pre-wrap\";\r\n    $pre.style.wordWrap = \"break-word\";\r\n    $wrap.style.visibility = \"hidden\";\r\n\r\n    document.body.appendChild($wrap);\r\n    this.$input.style.height = $pre.clientHeight + \"px\";\r\n    $wrap.remove();\r\n  }\r\n}\r\n","import { ULTextField } from \"./text-field\";\r\nimport { createElementFrom, genId } from \"./utils\";\r\n\r\nexport class CheckList {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  name: string,\r\n   *  multiple: boolean,\r\n   *  items: Array<{key: any, value: string, checked: boolean}>,\r\n   *  editable?: boolean\r\n   * }} param1\r\n   */\r\n  constructor($target, { name, multiple, items, editable = false }) {\r\n    this.$element = document.createElement(\"div\");\r\n    this.multiple = multiple;\r\n    this.editable = editable;\r\n    this.name = name || \"checklist_\" + genId();\r\n\r\n    /**\r\n     * @type {Array<{\r\n     *  key: string|number,\r\n     *  value: string,\r\n     *  checked: boolean,\r\n     *  $input: HTMLInputElement,\r\n     *  textField?: ULTextField,\r\n     *  $element: HTMLInputElement\r\n     * }>}\r\n     */\r\n    this.items = [];\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.onChange = () => {};\r\n    this.onRemove = () => {};\r\n\r\n    for (const i of items) this.addItem(i);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  value: string,\r\n   *  checked: boolean\r\n   * }} param0\r\n   * @returns\r\n   */\r\n  addItem({ value, checked = false }) {\r\n    const type = this.multiple ? \"checkbox\" : \"radio\";\r\n    let key = \"item_\" + genId();\r\n    const newItem = {\r\n      key,\r\n      value,\r\n      get checked() {\r\n        return !!this.$input.checked;\r\n      },\r\n      set checked(v) {\r\n        this.$input.checked = v;\r\n      },\r\n      $input: null,\r\n      textField: null,\r\n      $element: createElementFrom(`\r\n        <div>\r\n          <label for=\"${key}\" class=\"checklist-item ${\r\n        this.editable ? \"editable\" : \"\"\r\n      }\">\r\n            <input ${checked ? \"checked\" : \"\"} type=\"${type}\" name=\"${\r\n        this.name\r\n      }\" id=\"${key}\"/>\r\n            <div class=\"${type}__mark\"></div>\r\n            <div class=\"checklist-item__value\">${value}</div>\r\n            ${\r\n              this.editable\r\n                ? `<span class=\"spacex-1\"></span>\r\n                  <button type=\"button\" class=\"checklist-item__remove cross-btn secondary small\"></button>`\r\n                : ``\r\n            }\r\n          </label>\r\n        </div>\r\n    `),\r\n    };\r\n\r\n    newItem.$input = newItem.$element.querySelector(\"input\");\r\n    newItem.checked = checked;\r\n    newItem.$input.addEventListener(\"change\", () => {\r\n      this.onChange({\r\n        ...newItem,\r\n      });\r\n    });\r\n    this.$element.appendChild(newItem.$element);\r\n    this.items.push(newItem);\r\n\r\n    if (this.editable) {\r\n      newItem.textField = new ULTextField(\r\n        newItem.$element.querySelector(\".checklist-item__value\"),\r\n        {\r\n          multiline: true,\r\n          placeholder: \"Option\",\r\n          value: newItem.value,\r\n          required: true,\r\n        }\r\n      );\r\n      newItem.textField.onInput = () => {\r\n        newItem.value = newItem.textField.value;\r\n        this.onChange({\r\n          ...newItem,\r\n        });\r\n      };\r\n      newItem.$element\r\n        .querySelector(\".checklist-item__remove\")\r\n        .addEventListener(\"click\", () => {\r\n          this.removeItem(newItem);\r\n        });\r\n    }\r\n\r\n    return newItem;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  key: string|number,\r\n   *  value: string,\r\n   *  $element: HTMLElement\r\n   * }} param0\r\n   */\r\n  removeItem({ key = null, value = null, $element = null }) {\r\n    let removed = null;\r\n    this.items.splice(\r\n      this.items.findIndex((item) => {\r\n        if (\r\n          item.key == key ||\r\n          item.value == value ||\r\n          item.$element == $element\r\n        ) {\r\n          removed = item;\r\n          item.$element.remove();\r\n          return true;\r\n        }\r\n      }),\r\n      1\r\n    );\r\n    if (removed) this.onRemove({ ...removed });\r\n  }\r\n\r\n  reportValidity() {\r\n    let valid = this.items.every(i => i.textField.reportValidity());\r\n    if (valid) {\r\n      valid = this.items.findIndex(i => i.$input.checked) != -1;\r\n      \r\n      if (!valid) {\r\n        this.items[0].$input.setCustomValidity(\"Please check at least 1 item\");\r\n        this.items[0].$input.reportValidity();\r\n        this.items[0].$input.scrollIntoView({\r\n          block: \"center\",\r\n          behavior: \"smooth\",\r\n        })\r\n      }\r\n    }\r\n    return valid;\r\n  }\r\n}\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nexport class Complete {\r\n  /**\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  text: string,\r\n   *  values: {[key: string]: string},\r\n   *  disabled: boolean\r\n   * }} param1\r\n   */\r\n  constructor($target, { text = \"\", values = {}, disabled = false }) {\r\n    this.$element = document.createElement(\"div\");\r\n\r\n    this.onInput = () => {};\r\n    this._disabled = disabled;\r\n    this.setText({ text, values });\r\n\r\n    $target.replaceWith(this.$element);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  text: string\r\n   *  values: {[key: string]: string}\r\n   * }} param0\r\n   */\r\n  setText({ text, values }) {\r\n    this.$element.innerHTML = \"\";\r\n    this.text = text;\r\n    this.values = { ...values };\r\n    this.$content = createElementFrom(text);\r\n\r\n    if (this.$content) {\r\n      this.$content.querySelectorAll(\"c\").forEach((c) => {\r\n        const w = c.getAttribute(\"width\");\r\n        const id = c.getAttribute(\"id\");\r\n        const $span = document.createElement(\"span\");\r\n        const $inp = createElementFrom(\r\n          `<input data-id=\"${id}\" class=\"inline-text-field\" type=\"text\" maxlength=\"${w}\" ${\r\n            this._disabled ? \"disabled\" : \"\"\r\n          } />`\r\n        );\r\n        $span.style.visibility = \"hidden\";\r\n        $span.style.position = \"absolute\";\r\n        $span.innerText = \"m\".repeat(w);\r\n        $span.style.fontSize = $inp.style.fontSize = \"1rem\";\r\n        $span.style.fontFamily = $inp.style.fontFamily = \"monospace\";\r\n\r\n        document.body.appendChild($span);\r\n        $inp.style.width = $span.clientWidth + \"px\";\r\n\r\n        $inp.value = values[id] || \"\";\r\n        $inp.addEventListener(\"input\", () => {\r\n          this.values[id] = $inp.value;\r\n          this.onInput({ id, value: $inp.value });\r\n        });\r\n        c.replaceWith($inp);\r\n        $span.remove();\r\n      });\r\n\r\n      this.$element.appendChild(this.$content);\r\n\r\n      this.$content.style.whiteSpace = \"pre-wrap\";\r\n      this.$content.style.wordWrap = \"break-word\";\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} text\r\n */\r\nexport function parseText(text) {\r\n  const $pre = document.createElement(\"pre\");\r\n  let currentId = 1;\r\n  const values = {};\r\n\r\n  let toComplete = \"\";\r\n  let mode = false;\r\n\r\n  function put() {\r\n    if (toComplete) {\r\n      $pre.append(\r\n        createElementFrom(\r\n          `<span><c id=\"${currentId}\" width=\"${toComplete.length}\" /></span>`\r\n        )\r\n      );\r\n      values[currentId] = toComplete;\r\n      currentId++;\r\n      toComplete = \"\";\r\n    }\r\n    mode = false;\r\n  }\r\n\r\n  for (let i = 0; i < text.length; i++) {\r\n    if (text[i] == \"\\\\\") {\r\n      if (i == text.length - 1) continue;\r\n      i++;\r\n      if (text[i] == \"\\n\") continue;\r\n      if (mode) toComplete += text[i];\r\n      else $pre.append(document.createTextNode(text[i]));\r\n    } else if (text[i] == \"\\n\") {\r\n      put();\r\n      $pre.append(document.createTextNode(\"\\n\"));\r\n    } else if (mode) {\r\n      if (text[i] == \"]\") {\r\n        put();\r\n      } else {\r\n        toComplete += text[i];\r\n      }\r\n    } else if (text[i] == \"[\") {\r\n      mode = true;\r\n    } else {\r\n      $pre.append(document.createTextNode(text[i]));\r\n    }\r\n  }\r\n  put();\r\n  return { parsedText: $pre.outerHTML, values };\r\n}\r\n\r\nexport function unParseText({ parsedText, values }) {\r\n  const replace = (s) =>\r\n    s.replaceAll(\"\\\\\", \"\\\\\\\\\").replaceAll(\"[\", \"\\\\[\").replaceAll(\"]\", \"\\\\]\");\r\n  const $pre = createElementFrom(replace(parsedText));\r\n  $pre.querySelectorAll(\"c\").forEach((c) => {\r\n    const id = c.getAttribute(\"id\");\r\n    c.replaceWith(document.createTextNode(`[${replace(values[id] || \"\")}]`));\r\n  });\r\n  return $pre.innerText;\r\n}\r\n","import { ULTextField } from \"./text-field\";\r\nimport { createElementFrom } from \"./utils\";\r\n\r\nexport class Match {\r\n  /**\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  left: string[],\r\n   *  right: string[],\r\n   *  connections: number[][],\r\n   *  editable: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    { left = [], right = [], connections = [], editable = false }\r\n  ) {\r\n    this._canvasWidth = 100;\r\n    this.$element = createElementFrom(`\r\n      <div class=\"match\">\r\n        <div class=\"match__side match__side--left\"></div>\r\n        <canvas class=\"match__middle\" width=\"${this._canvasWidth}\" height=\"0\"></canvas>\r\n        <div class=\"match__side match__side--right\"></div>\r\n      </div>\r\n    `);\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.$left = this.$element.querySelector(\".match__side--left\");\r\n    this.$right = this.$element.querySelector(\".match__side--right\");\r\n    /**\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.$middle = this.$element.querySelector(\".match__middle\");\r\n    this._selected = [null, null];\r\n\r\n    this._ctx = this.$middle.getContext(\"2d\");\r\n\r\n    /**\r\n     * @type {number[][]}\r\n     */\r\n    this._connections = [];\r\n\r\n    /**\r\n     * @typedef {{\r\n     *  value: string,\r\n     *  $element: HTMLElement,\r\n     *  $btn: HTMLButtonElement,\r\n     *  textField?: ULTextField}} _Item\r\n     */\r\n    /**\r\n     * @type {Array<_Item>}\r\n     */\r\n    this.left = [];\r\n    /**\r\n     * @type {Array<_Item>}\r\n     */\r\n    this.right = [];\r\n    this.editable = editable;\r\n\r\n    for (let item of left) {\r\n      this.addLeft(item);\r\n    }\r\n    for (let item of right) {\r\n      this.addRight(item);\r\n    }\r\n\r\n    this.connections = connections.map((c) => [...c]);\r\n\r\n    this.onNewConnection = ([_, __]) => {};\r\n    this.onRemoveConnection = ([_, __]) => {};\r\n    this.onRemove = ({ sideName, item }) => {};\r\n    this.onChange = ({ sideName, item }) => {};\r\n  }\r\n\r\n  _drawConnections() {\r\n    this._ctx.clearRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\r\n\r\n    for (const c of this._connections) {\r\n      if (!this.left[c[0]] || !this.right[c[1]]) {\r\n        continue;\r\n      }\r\n      const $lel = this.left[c[0]].$btn;\r\n      const $rel = this.right[c[1]].$btn;\r\n      const lbr = $lel.getBoundingClientRect();\r\n      const rbr = $rel.getBoundingClientRect();\r\n      const top = this.$middle.getBoundingClientRect().top;\r\n      const y1 = lbr.top + lbr.height / 2 - top;\r\n      const y2 = rbr.top + rbr.height / 2 - top;\r\n\r\n      this._ctx.lineWidth = 4;\r\n      this._ctx.strokeStyle = \"#00a8a8\";\r\n      this._ctx.beginPath();\r\n      this._ctx.moveTo(0, y1);\r\n      this._ctx.lineTo(this._ctx.canvas.width, y2);\r\n      this._ctx.stroke();\r\n\r\n      $lel.classList.add(\"match-button--active\");\r\n      $rel.classList.add(\"match-button--active\");\r\n\r\n      $lel.blur();\r\n      $rel.blur();\r\n    }\r\n  }\r\n\r\n  set connections(v) {\r\n    this._connections = v;\r\n    this._drawConnections();\r\n  }\r\n\r\n  get connections() {\r\n    return this._connections;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number[]} c\r\n   * @returns\r\n   */\r\n  addConnection(connection) {\r\n    this._removeConnectionHelper(connection);\r\n    this._connections.push([...connection]);\r\n    this.connections = this._connections;\r\n    this.onNewConnection([...connection]);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Array<number?>} connection\r\n   */\r\n  removeConnection(connection) {\r\n    const rc = this._removeConnectionHelper(connection);\r\n    this.connections = this._connections;\r\n    this.onRemoveConnection(rc);\r\n  }\r\n\r\n  _removeConnectionHelper(connection) {\r\n    let ret = [];\r\n    this._connections = this._connections.filter((c) => {\r\n      if (c[0] == connection[0] || c[1] == connection[1]) {\r\n        ret = [...c];\r\n        this.left[c[0]].$btn.classList.remove(\"match-button--active\");\r\n        this.right[c[1]].$btn.classList.remove(\"match-button--active\");\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} value\r\n   * @returns {_Item}\r\n   */\r\n  addLeft(value) {\r\n    return this._addToSide(value, \"left\");\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} value\r\n   * @returns {_Item}\r\n   */\r\n  addRight(value) {\r\n    return this._addToSide(value, \"right\");\r\n  }\r\n\r\n  removeLeft(idx) {\r\n    const removed = this._removeSide(idx, \"left\");\r\n    this.onRemove({ sideName: \"left\", removed });\r\n    return removed;\r\n  }\r\n\r\n  removeRight(idx) {\r\n    const removed = this._removeSide(idx, \"right\");\r\n    this.onRemove({ sideName: \"right\", removed });\r\n    return removed;\r\n  }\r\n\r\n  _removeSide(idx, sideName) {\r\n    let sideItems = this[sideName];\r\n    let ci = sideName == \"left\" ? 0 : 1;\r\n\r\n    this.removeConnection(sideName == \"left\" ? [idx, null] : [null, idx]);\r\n\r\n    for (const c of this._connections) {\r\n      if (c[ci] > idx) c[ci]--;\r\n    }\r\n\r\n    if (this._selected[ci] == idx) {\r\n      this._selected[ci] = null;\r\n    }\r\n\r\n    const removed = sideItems.splice(idx, 1)[0];\r\n    removed.$element.remove();\r\n    for (let i = idx; i < sideItems.length; i++) {\r\n      sideItems[i].key--;\r\n    }\r\n    this._adjustHeight();\r\n    return removed;\r\n  }\r\n\r\n  _addToSide(value, sideName) {\r\n    const $side = this[\"$\" + sideName];\r\n    const sideItems = this[sideName];\r\n    let [ci1, ci2] = sideName == \"left\" ? [0, 1] : [1, 0];\r\n\r\n    const newItem = {\r\n      key: sideItems.length,\r\n      value,\r\n      $element: createElementFrom(`\r\n        <div class=\"match-button__wrapper match-button__wrapper--${sideName}\">\r\n          <button class=\"match-button match-button--${sideName}\">\r\n            <div class=\"match-button__value\">${value}</div>\r\n          </button>\r\n          ${\r\n            this.editable\r\n              ? `<button type=\"button\" class=\"match-button__remove cross-btn secondary x-small\"></button>`\r\n              : \"\"\r\n          }\r\n        </div>\r\n      `),\r\n      $btn: null,\r\n    };\r\n    newItem.$btn = newItem.$element.querySelector(\".match-button\");\r\n    $side.appendChild(newItem.$element);\r\n    if (this.editable) {\r\n      newItem.textField = new ULTextField(\r\n        newItem.$btn.querySelector(\".match-button__value\"),\r\n        {\r\n          multiline: true,\r\n          disableEnter: true,\r\n          value,\r\n          placeholder: sideName.charAt(0).toUpperCase() + sideName.slice(1),\r\n          required: true,\r\n        }\r\n      );\r\n      newItem.textField.onInput = () => {\r\n        newItem.value = newItem.textField.value;\r\n        this._adjustHeight();\r\n        this.onChange({ sideName, item: newItem });\r\n      };\r\n      newItem.$element\r\n        .querySelector(\".match-button__remove\")\r\n        .addEventListener(\"click\", () => {\r\n          const r = this._removeSide(newItem.key, sideName);\r\n          this.onRemove({ item: r, sideName });\r\n        });\r\n    }\r\n\r\n    newItem.$btn.addEventListener(\"focus\", (e) => {\r\n      this._selected[ci1] = newItem.key;\r\n      this.removeConnection(\r\n        sideName == \"left\" ? [newItem.key, null] : [null, newItem.key]\r\n      );\r\n      if (this._selected[ci2] != null) {\r\n        this.addConnection([this._selected[0], this._selected[1]]);\r\n        this._selected = [null, null];\r\n      }\r\n    });\r\n    newItem.$btn.addEventListener(\"blur\", () => {\r\n      setTimeout(() => {\r\n        if (this._selected[ci1] == newItem.key) this._selected[ci1] = null;\r\n      }, 10);\r\n    });\r\n    this._adjustHeight();\r\n    sideItems.push(newItem);\r\n\r\n    return newItem;\r\n  }\r\n\r\n  _adjustHeight() {\r\n    this.$middle.height = 0;\r\n    this.$middle.height = this.$element.clientHeight;\r\n    this._drawConnections();\r\n  }\r\n\r\n  reportValidity() {\r\n    if (this.editable) {\r\n      let valid =\r\n        this.left.every((i) => i.textField.reportValidity()) &&\r\n        this.right.every((i) => i.textField.reportValidity());\r\n      if (valid && !this._connections.length) {\r\n        valid = false;\r\n        this.left[0].$btn.setCustomValidity(\r\n          \"There should be at least 1 connection\"\r\n        );\r\n        this.left[0].$btn.reportValidity();\r\n        this.left[0].$btn.scrollIntoView({\r\n          block: \"center\",\r\n          behavior: \"smooth\",\r\n        });\r\n      }\r\n      return valid;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nexport class Progress {\r\n  /**\r\n   * \r\n   * @param {HTMLElement} $target \r\n   * @param {{value: number, total: number}} param1 \r\n   */\r\n  constructor($target, { value, total }) {\r\n    this._value = value;\r\n    this._total = total;\r\n\r\n    this.$element = createElementFrom(`\r\n    <div class=\"progress\">\r\n      <div class=\"progress__text\">\r\n      </div>\r\n      <div class=\"progress__bar\">\r\n      </div>\r\n    </div>\r\n  `);\r\n\r\n    this._updateProgress();\r\n    $target.replaceWith(this.$element);\r\n  }\r\n  set value(v) {\r\n    this._value = v;\r\n    this._updateProgress();\r\n  }\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set total(v) {\r\n    this._total = v;\r\n    this._updateProgress();\r\n  }\r\n  get total() {\r\n    return this._total;\r\n  }\r\n\r\n  _updateProgress() {\r\n    const $ptext = this.$element.querySelector(\".progress__text\");\r\n    const $pbar = this.$element.querySelector(\".progress__bar\");\r\n\r\n    $ptext.innerText = `${this.value} of ${this.total}`;\r\n    $pbar.innerHTML = \"\";\r\n\r\n    for (let i = 1; i <= this.value; i++) {\r\n      $pbar.append(\r\n        createElementFrom(\r\n          `<div class=\"progress__bit progress__bit--done\"></div>`\r\n        ),\r\n        createElementFrom(`<div class=\"spacex-1px\"></div>`)\r\n      );\r\n    }\r\n    for (let i = this.value + 1; i < this.total; i++) {\r\n      $pbar.append(\r\n        createElementFrom(`<div class=\"progress__bit\"></div>`),\r\n        createElementFrom(`<div class=\"spacex-1px\"></div>`)\r\n      );\r\n    }\r\n    if (this.value < this.total) {\r\n      $pbar.append(createElementFrom(`<div class=\"progress__bit\"></div>`));\r\n    }\r\n  }\r\n}\r\n","import { CheckList } from \"./check-list\";\r\nimport { Complete } from \"./complete\";\r\nimport { Match } from \"./match\";\r\nimport { Progress } from \"./progress\";\r\nimport { OLTextField, ULTextField } from \"./text-field\";\r\nimport { createElementFrom } from \"./utils\";\r\n\r\nexport class QuizSection {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{progress: {value: number, total: number}}} param1\r\n   */\r\n  constructor($target, { quest, progress, onNext, onPrev, onFinish }) {\r\n    this.$element = createElementFrom(`\r\n      <div class=\"quiz-section\">\r\n        <div class=\"paper-4 quiz-section__wrapper\">\r\n          <div class=\"title primary\">\r\n            ${quest.title}\r\n          </div>\r\n          <div class=\"spacey-2\"></div>\r\n          <div class=\"subtitle\">\r\n            ${quest.question}\r\n          </div>\r\n          <div class=\"spacey-1\"></div>\r\n          <div class=\"quiz-section__content\"></div>\r\n          <div class=\"spacey-2\"></div>\r\n          <div class=\"space-between\">\r\n            <div class=\"progress\"></div>\r\n            <div class=\"quiz-section__buttons\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.$quizSectionWrap = this.$element.querySelector(\".quiz-section__wrapper\");\r\n    this.$buttonsContainer = this.$element.querySelector(\r\n      \".quiz-section__buttons\"\r\n    );\r\n\r\n    this.updateProgress(progress.value, progress.total);\r\n\r\n    this.onNext = onNext || (() => {});\r\n    this.onPrev = onPrev || (() => {});\r\n    this.onFinish = onFinish || (() => {});\r\n\r\n    this.$content = this.$element.querySelector(\".quiz-section__content\");\r\n\r\n    const typeHandlers = {\r\n      question: () => {\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($placeholder);\r\n        const input = new OLTextField($placeholder, {\r\n          value: quest.answer || \"\",\r\n          label: \"Your answer\",\r\n        });\r\n        input.onInput = () => {\r\n          quest.answer = input.value;\r\n        };\r\n      },\r\n      choose: (multiple) => {\r\n        const $form = document.createElement(\"form\");\r\n        $form.onsubmit = (e) => e.preventDefault();\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($form);\r\n        $form.appendChild($placeholder);\r\n\r\n        if (!quest.answers) quest.answers = [];\r\n\r\n        const checklist = new CheckList($placeholder, {\r\n          multiple,\r\n          items: quest.options.map((o, i) => ({\r\n            value: o,\r\n            checked: quest.answers.includes(i + 1),\r\n          })),\r\n        });\r\n\r\n        checklist.onChange = () => {\r\n          quest.answers = [];\r\n          checklist.items.forEach((i, idx) => {\r\n            if (i.checked) quest.answers.push(idx + 1);\r\n          });\r\n        };\r\n      },\r\n      \"choose one\": function () {\r\n        this.choose(false);\r\n      },\r\n      \"choose multiple\": function () {\r\n        this.choose(true);\r\n      },\r\n      complete: () => {\r\n        if (!quest.answers) quest.answers = {};\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.append($placeholder);\r\n        const complete = new Complete($placeholder, {\r\n          values: quest.answers,\r\n          text: quest.text,\r\n        });\r\n        complete.onInput = ({ id, value }) => {\r\n          quest.answers[id] = value;\r\n        };\r\n      },\r\n      match: () => {\r\n        if (!quest.answers) quest.answers = [];\r\n\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($placeholder);\r\n\r\n        const match = new Match($placeholder, {\r\n          left: quest.left,\r\n          right: quest.right,\r\n          connections: quest.answers.map(([l, r]) => [l - 1, r - 1]),\r\n        });\r\n\r\n        match.onChange = match.onRemove = match.onNewConnection = match.onRemoveConnection = () => {\r\n          quest.left = match.left.map((i) => i.value);\r\n          quest.right = match.right.map((i) => i.value);\r\n          quest.answers = match.connections.map((c) => [c[0] + 1, c[1] + 1]);\r\n        };\r\n      },\r\n    };\r\n\r\n    typeHandlers[quest.type] && typeHandlers[quest.type]();\r\n  }\r\n\r\n  updateProgress(value, total) {\r\n    this.progress = new Progress(this.$element.querySelector(\".progress\"), {\r\n      value,\r\n      total,\r\n    });\r\n\r\n    this.$buttonsContainer.innerHTML = \"\";\r\n\r\n    let $prev;\r\n    let $next;\r\n    let $finish;\r\n\r\n    if (value > 1) {\r\n      this.$buttonsContainer.append(\r\n        ($prev = createElementFrom(\r\n          `<button class=\"text-button secondary\">prev</button>`\r\n        )),\r\n        createElementFrom(`<span class=\"spacex-1\"></span>`)\r\n      );\r\n    }\r\n\r\n    if (value < total) {\r\n      this.$buttonsContainer.appendChild(\r\n        ($next = createElementFrom(\r\n          `<button class=\"filled-button primary\">next</button>`\r\n        ))\r\n      );\r\n    }\r\n    if (value == total) {\r\n      this.$buttonsContainer.appendChild(\r\n        ($finish = createElementFrom(\r\n          `<button class=\"filled-button success\">finish</button>`\r\n        ))\r\n      );\r\n    }\r\n\r\n    if ($prev) $prev.addEventListener(\"click\", () => this.onPrev());\r\n    if ($next) $next.addEventListener(\"click\", () => this.onNext());\r\n    if ($finish) $finish.addEventListener(\"click\", () => this.onFinish());\r\n  }\r\n\r\n  remove() {\r\n    this.$element.remove();\r\n  }\r\n}\r\n","import { QuizSection } from \"./components/quiz-section\";\r\nimport { createElementFrom } from \"./components/utils\";\r\n\r\nlet quiz = {\r\n  name: \"My first quiz\",\r\n  quests: [\r\n    {\r\n      title: \"Answer the question\",\r\n      type: \"question\",\r\n      question:\r\n        \"What is the name of the first function called when executing a C++ program?\",\r\n      correctAnswers: [\"main\"],\r\n      answer: \"\",\r\n    },\r\n    {\r\n      title: \"Choose the right answer\",\r\n      type: \"choose one\",\r\n      question: \"What is the time complexity of 'Binary search'?\",\r\n      options: [\"O(1)\", \"O(n)\", \"O(log n)\", \"O(n log n)\"],\r\n      correctAnswers: [3],\r\n    },\r\n    {\r\n      title: \"Choose the right answers\",\r\n      type: \"choose multiple\",\r\n      question:\r\n        \"What may be the result of a sorting algorithm applied on an set of numbers?\",\r\n      options: [\r\n        \"[1, 4, 5, 3, 10, 14]\",\r\n        \"[55, 90, 91, 123, 241]\",\r\n        \"[62, 42, -1, -2, -99]\",\r\n      ],\r\n      correctAnswers: [2, 3],\r\n    },\r\n    {\r\n      title: \"Complete empty spaces\",\r\n      type: \"complete\",\r\n      question:\r\n        'Write a function named \"Hello\" that prints \"Hello world\" to the console and something more here',\r\n      text: `<pre>function <span><c id=\"1\" width=\"5\" /></span>() {\r\n  console.<span><c id=\"2\" width=\"3\"/></span>(<span><c id=\"3\" width=\"13\"/></span>);\r\n}</pre>`,\r\n      correctAnswers: {\r\n        1: \"Hello\",\r\n        2: \"log\",\r\n        3: '\"Hello world\"',\r\n      },\r\n    },\r\n    {\r\n      title: \"Match the sides\",\r\n      type: \"match\",\r\n      question: \"Match the size of given types\",\r\n      left: [\"int\", \"char\", \"short\"],\r\n      right: [\"8 bits\", \"16 bits\", \"32 bits\"],\r\n      correctAnswers: [\r\n        [1, 3],\r\n        [2, 1],\r\n        [3, 2],\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nfor (const q of quiz.quests) {\r\n  q.answer = null;\r\n  q.answers = null;\r\n}\r\n\r\nfunction main() {\r\n  const $quiz = document.querySelector(\"#quiz\");\r\n  function makeQuest(idx) {\r\n    const $placeholder = document.createElement(\"div\");\r\n    $quiz.innerHTML = \"\";\r\n    $quiz.appendChild($placeholder);\r\n    const ret = {\r\n      quizSection: new QuizSection($placeholder, {\r\n        progress: {\r\n          value: idx + 1,\r\n          total: quiz.quests.length,\r\n        },\r\n        quest: quiz.quests[idx],\r\n        onPrev: () => {\r\n          if (current.questIdx > 0) {\r\n            current = makeQuest(current.questIdx - 1);\r\n          }\r\n        },\r\n        onNext: () => {\r\n          if (current.questIdx < quiz.quests.length - 1) {\r\n            current = makeQuest(current.questIdx + 1);\r\n          }\r\n        },\r\n      }),\r\n      questIdx: idx,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  let current = makeQuest(0);\r\n}\r\n\r\nmain();\r\n"],"names":["$d76f17f86831237e57b13ea96189ca87$export$createElementFrom","str","template","document","createElement","trim","innerHTML","content","firstChild","$d76f17f86831237e57b13ea96189ca87$export$genId","performance","now","toString","$fe2b67d8b3e406a425e69c824c05d43a$var$TextFieldBase","constructor","$target","$element","required","placeholder","value","this","$input","querySelector","addEventListener","classList","add","remove","onBlur","onInput","multiline","_resize","replaceWith","v","focus","scrollIntoView","block","behavior","blur","reportValidity","valid","$fe2b67d8b3e406a425e69c824c05d43a$export$OLTextField","label","super","$fe2b67d8b3e406a425e69c824c05d43a$export$ULTextField","disableEnter","e","keyCode","preventDefault","$wrap","$pre","style","window","getComputedStyle","innerText","fontSize","fontFamily","fontWeight","width","clientWidth","whiteSpace","wordWrap","visibility","body","appendChild","height","clientHeight","$597157a6c23a32954ee86749e119717f$export$CheckList","name","multiple","items","editable","onChange","onRemove","i","addItem","checked","type","key","newItem","textField","push","removeItem","removed","splice","findIndex","item","every","setCustomValidity","$6ffe5c7ff43f449e47e98225f31d0cc6$export$Complete","text","values","disabled","_disabled","setText","$content","querySelectorAll","forEach","c","w","getAttribute","id","$span","$inp","position","repeat","$eeabf90374bed311dbd67951449553ed$export$Match","left","right","connections","_canvasWidth","$left","$right","$middle","_selected","_ctx","getContext","_connections","addLeft","addRight","map","onNewConnection","_","__","onRemoveConnection","sideName","_drawConnections","clearRect","canvas","$lel","$btn","$rel","lbr","getBoundingClientRect","rbr","top","y1","y2","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","addConnection","connection","_removeConnectionHelper","removeConnection","rc","ret","filter","_addToSide","removeLeft","idx","_removeSide","removeRight","sideItems","ci","length","_adjustHeight","$side","ci1","ci2","charAt","toUpperCase","slice","r","setTimeout","$d1082b678c85387db9fa7b25e9961479$export$Progress","total","_value","_total","_updateProgress","$ptext","$pbar","append","$1871156d3058bac1708a7576868fd2ce$export$QuizSection","quest","progress","onNext","onPrev","onFinish","title","question","$quizSectionWrap","$buttonsContainer","updateProgress","typeHandlers","$placeholder","input","answer","choose","$form","onsubmit","answers","checklist","options","o","includes","choose one","choose multiple","complete","match","l","$prev","$next","$finish","$5088b70f59fcf05c350c8cb00a353195$var$quiz","quests","correctAnswers","1","2","3","q","$quiz","current","makeQuest","quizSection","questIdx","$5088b70f59fcf05c350c8cb00a353195$var$main"],"version":3,"file":"quiz.bff72bb9.js.map"}