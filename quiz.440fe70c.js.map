{"mappings":"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","sources":["node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/regex.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/v1.js","src/components/utils.js","src/components/text-field.js","src/components/check-list.js","src/components/complete.js","src/components/match.js","src/components/progress.js","src/components/quiz-section.js","src/quiz.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import * as uuid from \"uuid\";\r\n\r\n/**\r\n * \r\n * @param {string} str \r\n * @returns {HTMLElement}\r\n */\r\n\r\nexport function createElementFrom(str) {\r\n  /**\r\n   * @type {HTMLTemplateElement}\r\n   */\r\n  const template = document.createElement(\"template\");\r\n  str = str.trim();\r\n  template.innerHTML = str;\r\n  return template.content.firstChild;\r\n}\r\n\r\nexport function genId() {\r\n  return uuid.v1();\r\n}\r\n\r\n\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nclass TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {HTMLElement} $element\r\n   */\r\n  constructor($target, $element, { required, placeholder, value }) {\r\n    this.$element = $element;\r\n    /**\r\n     * @type {HTMLTextAreaElement | HTMLInputElement}\r\n     */\r\n    this.$input = this.$element.querySelector(\"[data-input]\");\r\n\r\n    this.$input.required = required;\r\n    if (placeholder) this.placeholder = placeholder;\r\n    if (value) this.value = value;\r\n\r\n    this.$input.addEventListener(\"focus\", () => {\r\n      this.$element.classList.add(\"has-text\", \"active\");\r\n    });\r\n\r\n    this.$input.addEventListener(\"blur\", () => {\r\n      if (!this.value && !this.placeholder) {\r\n        this.$element.classList.remove(\"has-text\");\r\n      }\r\n      this.$element.classList.remove(\"active\");\r\n      this.onBlur();\r\n    });\r\n\r\n    this.onInput = () => {};\r\n    this.onBlur = () => {};\r\n\r\n    this.$element\r\n      .querySelector(\"[data-input]\")\r\n      .addEventListener(\"input\", () => {\r\n        this.multiline && this._resize();\r\n        this.onInput();\r\n      });\r\n\r\n    $target.replaceWith(this.$element);\r\n  }\r\n\r\n  set value(v) {\r\n    this.$input.value = v;\r\n    if (v) this.$element.classList.add(\"has-text\");\r\n    else this.$element.classList.remove(\"has-text\");\r\n    this.multiline && this._resize();\r\n  }\r\n  get value() {\r\n    return this.$input.value;\r\n  }\r\n  set placeholder(v) {\r\n    this.$input.placeholder = v;\r\n    if (v) this.$element.classList.add(\"has-text\");\r\n    else this.$element.classList.remove(\"has-text\");\r\n  }\r\n  get placeholder() {\r\n    return this.$input.placeholder;\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n    this.$input.scrollIntoView({\r\n      block: \"center\",\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n  blur() {\r\n    this.$input.blur();\r\n  }\r\n\r\n  reportValidity() {\r\n    const valid = this.$input.reportValidity();\r\n    if (!valid)\r\n      this.$input.scrollIntoView({\r\n        block: \"center\",\r\n        behavior: \"smooth\",\r\n      });\r\n    return valid;\r\n  }\r\n}\r\n\r\nexport class OLTextField extends TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  placeholder: string,\r\n   *  value: string,\r\n   *  label: string,\r\n   *  required: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    { placeholder = \"\", value = \"\", label = \"\", required = false }\r\n  ) {\r\n    super(\r\n      $target,\r\n      createElementFrom(`\r\n        <div class=\"ol-text-field\">\r\n          <input class=\"ol-text-field__input\" type=\"text\" data-input />\r\n          ${label ? `<span class=\"ol-text-field__label\">${label}</span>` : \"\"}\r\n        </div>\r\n    `),\r\n      { required, value, placeholder }\r\n    );\r\n  }\r\n}\r\n\r\nexport class ULTextField extends TextFieldBase {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  placeholder: string,\r\n   *  value: string,\r\n   *  multiline: boolean,\r\n   *  required: boolean\r\n   *  disableEnter: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    {\r\n      placeholder = \"\",\r\n      value = \"\",\r\n      multiline = false,\r\n      required = false,\r\n      disableEnter = false,\r\n    }\r\n  ) {\r\n    super(\r\n      $target,\r\n      createElementFrom(`\r\n        <div class=\"ul-text-field\">\r\n        ${\r\n          multiline\r\n            ? `<textarea role=\"textbox\" class=\"ul-text-field__input\" data-input ></textarea>`\r\n            : `<input class=\"ul-text-field__input\" type=\"text\" data-input />`\r\n        }\r\n        </div>\r\n    `),\r\n      {\r\n        required,\r\n        placeholder,\r\n      }\r\n    );\r\n    this.multiline = multiline;\r\n    this.value = value;\r\n\r\n    if (this.multiline && disableEnter) {\r\n      this.$input.addEventListener(\"keydown\", (e) => {\r\n        if (e.keyCode == 13) {\r\n          e.preventDefault();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  _resize() {\r\n    const $wrap = createElementFrom(`<div><pre></pre></div>`);\r\n    const $pre = $wrap.querySelector(\"pre\");\r\n    const style = window.getComputedStyle(this.$input);\r\n\r\n    $pre.innerText = this.value + \" \";\r\n    $pre.style.fontSize = style.fontSize;\r\n    $pre.style.fontFamily = style.fontFamily;\r\n    $pre.style.fontWeight = style.fontWeight;\r\n    $wrap.style.width = this.$input.clientWidth + \"px\";\r\n    $pre.style.whiteSpace = \"pre-wrap\";\r\n    $pre.style.wordWrap = \"break-word\";\r\n    $wrap.style.visibility = \"hidden\";\r\n\r\n    document.body.appendChild($wrap);\r\n    this.$input.style.height = $pre.clientHeight + \"px\";\r\n    $wrap.remove();\r\n  }\r\n}\r\n","import { ULTextField } from \"./text-field\";\r\nimport { createElementFrom, genId } from \"./utils\";\r\n\r\nexport class CheckList {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  name: string,\r\n   *  multiple: boolean,\r\n   *  items: Array<{key: any, value: string, checked: boolean}>,\r\n   *  editable?: boolean\r\n   * }} param1\r\n   */\r\n  constructor($target, { name, multiple, items, editable = false }) {\r\n    this.$element = document.createElement(\"div\");\r\n    this.multiple = multiple;\r\n    this.editable = editable;\r\n    this.name = name || \"checklist_\" + genId();\r\n\r\n    /**\r\n     * @type {Array<{\r\n     *  key: string|number,\r\n     *  value: string,\r\n     *  checked: boolean,\r\n     *  $input: HTMLInputElement,\r\n     *  textField?: ULTextField,\r\n     *  $element: HTMLInputElement\r\n     * }>}\r\n     */\r\n    this.items = [];\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.onChange = () => {};\r\n    this.onRemove = () => {};\r\n\r\n    for (const i of items) this.addItem(i);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  value: string,\r\n   *  checked: boolean\r\n   * }} param0\r\n   * @returns\r\n   */\r\n  addItem({ value, checked = false }) {\r\n    const type = this.multiple ? \"checkbox\" : \"radio\";\r\n    let key = \"item_\" + genId();\r\n    const newItem = {\r\n      key,\r\n      value,\r\n      get checked() { return !!this.$input.checked; },\r\n      set checked(v) { this.$input.checked = v; },\r\n      $input: null,\r\n      textField: null,\r\n      $element: createElementFrom(`\r\n        <div>\r\n          <label\r\n            for=\"${key}\"\r\n            class=\"checklist-item ${this.editable ? \"editable\" : \"\"}\">\r\n\r\n              <input\r\n                ${checked ? \"checked\" : \"\"}\r\n                type=\"${type}\"\r\n                name=\"${this.name}\"\r\n                id=\"${key}\"\r\n              />\r\n\r\n              <div class=\"${type}__mark\"></div>\r\n              <div class=\"checklist-item__value\">${value}</div>\r\n              ${this.editable\r\n                  ? `<span class=\"spacex-1\"></span>\r\n                    <button type=\"button\" class=\"checklist-item__remove cross-btn secondary small\"></button>`\r\n                  : ``}\r\n\r\n          </label>\r\n        </div>\r\n    `),\r\n    };\r\n\r\n    newItem.$input = newItem.$element.querySelector(\"input\");\r\n    newItem.checked = checked;\r\n\r\n    newItem.$input.addEventListener(\r\n      \"change\",\r\n      () => {\r\n        this.onChange({ ...newItem });\r\n    });\r\n\r\n    this.$element.appendChild(newItem.$element);\r\n    this.items.push(newItem);\r\n\r\n    if (this.editable) {\r\n      newItem.textField = new ULTextField(\r\n        newItem.$element.querySelector(\".checklist-item__value\"),\r\n        {\r\n          multiline: true,\r\n          placeholder: \"Option\",\r\n          value: newItem.value,\r\n          required: true,\r\n        }\r\n      );\r\n      newItem.textField.onInput = () => {\r\n        newItem.value = newItem.textField.value;\r\n        this.onChange({ ...newItem });\r\n      };\r\n      newItem.$element\r\n        .querySelector(\".checklist-item__remove\")\r\n        .addEventListener(\r\n          \"click\",\r\n          () => { this.removeItem(newItem); }\r\n      );\r\n    }\r\n\r\n    return newItem;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  key: string|number,\r\n   *  value: string,\r\n   *  $element: HTMLElement\r\n   * }} param0\r\n   */\r\n  removeItem({ key = null, value = null, $element = null }) {\r\n    let removed = null;\r\n    this.items.splice(\r\n      this.items.findIndex((item) => {\r\n        if ( item.key == key || item.value == value || item.$element == $element ) {\r\n          removed = item;\r\n          item.$element.remove();\r\n          return true;\r\n        }\r\n      }),\r\n      1\r\n    );\r\n    if (removed) this.onRemove({ ...removed });\r\n  }\r\n\r\n  reportValidity() {\r\n    let valid = this.items.every(i => i.textField.reportValidity());\r\n    if (valid) {\r\n      valid = this.items.findIndex(i => i.$input.checked) != -1;\r\n      \r\n      if (!valid) {\r\n        this.items[0].$input.setCustomValidity(\"Please check at least 1 item\");\r\n        this.items[0].$input.reportValidity();\r\n        this.items[0].$input.scrollIntoView({ block: \"center\", behavior: \"smooth\" })\r\n      }\r\n    }\r\n    return valid;\r\n  }\r\n}\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nexport class Complete {\r\n  /**\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  text: string,\r\n   *  values: {[key: string]: string},\r\n   *  disabled: boolean\r\n   * }} param1\r\n   */\r\n  constructor($target, { text = \"\", values = {}, disabled = false }) {\r\n    this.$element = document.createElement(\"div\");\r\n\r\n    this.onInput = () => {};\r\n    this._disabled = disabled;\r\n    this.setText({ text, values });\r\n\r\n    $target.replaceWith(this.$element);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {{\r\n   *  text: string\r\n   *  values: {[key: string]: string}\r\n   * }} param0\r\n   */\r\n  setText({ text, values }) {\r\n    this.$element.innerHTML = \"\";\r\n    this.text = text;\r\n    this.values = { ...values };\r\n    this.$content = createElementFrom(text);\r\n\r\n    if (this.$content) {\r\n      this.$content.querySelectorAll(\"c\").forEach((c) => {\r\n        const w = c.getAttribute(\"width\");\r\n        const id = c.getAttribute(\"id\");\r\n        const $span = document.createElement(\"span\");\r\n        const $inp = createElementFrom(\r\n          `<input data-id=\"${id}\" class=\"inline-text-field\" type=\"text\" maxlength=\"${w}\" ${\r\n            this._disabled ? \"disabled\" : \"\"\r\n          } />`\r\n        );\r\n        $span.style.visibility = \"hidden\";\r\n        $span.style.position = \"absolute\";\r\n        $span.innerText = \"m\".repeat(w);\r\n        $span.style.fontSize = $inp.style.fontSize = \"1rem\";\r\n        $span.style.fontFamily = $inp.style.fontFamily = \"monospace\";\r\n\r\n        document.body.appendChild($span);\r\n        $inp.style.width = $span.clientWidth + \"px\";\r\n\r\n        $inp.value = values[id] || \"\";\r\n        $inp.addEventListener(\"input\", () => {\r\n          this.values[id] = $inp.value;\r\n          this.onInput({ id, value: $inp.value });\r\n        });\r\n        c.replaceWith($inp);\r\n        $span.remove();\r\n      });\r\n\r\n      this.$element.appendChild(this.$content);\r\n\r\n      this.$content.style.whiteSpace = \"pre-wrap\";\r\n      this.$content.style.wordWrap = \"break-word\";\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} text\r\n */\r\nexport function parseText(text) {\r\n  const $pre = document.createElement(\"pre\");\r\n  let currentId = 1;\r\n  const values = {};\r\n\r\n  let toComplete = \"\";\r\n  let mode = false;\r\n\r\n  function put() {\r\n    if (toComplete) {\r\n      $pre.append(\r\n        createElementFrom(\r\n          `<span><c id=\"${currentId}\" width=\"${toComplete.length}\" /></span>`\r\n        )\r\n      );\r\n      values[currentId] = toComplete;\r\n      currentId++;\r\n      toComplete = \"\";\r\n    }\r\n    mode = false;\r\n  }\r\n\r\n  for (let i = 0; i < text.length; i++) {\r\n    if (text[i] == \"\\\\\") {\r\n      if (i == text.length - 1) continue;\r\n      i++;\r\n      if (text[i] == \"\\n\") continue;\r\n      if (mode) toComplete += text[i];\r\n      else $pre.append(document.createTextNode(text[i]));\r\n    } else if (text[i] == \"\\n\") {\r\n      put();\r\n      $pre.append(document.createTextNode(\"\\n\"));\r\n    } else if (mode) {\r\n      if (text[i] == \"]\") {\r\n        put();\r\n      } else {\r\n        toComplete += text[i];\r\n      }\r\n    } else if (text[i] == \"[\") {\r\n      mode = true;\r\n    } else {\r\n      $pre.append(document.createTextNode(text[i]));\r\n    }\r\n  }\r\n  put();\r\n  return { parsedText: $pre.outerHTML, values };\r\n}\r\n\r\nexport function unParseText({ parsedText, values }) {\r\n  const replace = (s) =>\r\n    s.replaceAll(\"\\\\\", \"\\\\\\\\\").replaceAll(\"[\", \"\\\\[\").replaceAll(\"]\", \"\\\\]\");\r\n  const $pre = createElementFrom(replace(parsedText));\r\n  $pre.querySelectorAll(\"c\").forEach((c) => {\r\n    const id = c.getAttribute(\"id\");\r\n    c.replaceWith(document.createTextNode(`[${replace(values[id] || \"\")}]`));\r\n  });\r\n  return $pre.innerText;\r\n}\r\n","import { ULTextField } from \"./text-field\";\r\nimport { createElementFrom } from \"./utils\";\r\n\r\nexport class Match {\r\n  /**\r\n   * @param {HTMLElement} $target\r\n   * @param {{\r\n   *  left: string[],\r\n   *  right: string[],\r\n   *  connections: number[][],\r\n   *  editable: boolean\r\n   * }} param1\r\n   */\r\n  constructor(\r\n    $target,\r\n    { left = [], right = [], connections = [], editable = false }\r\n  ) {\r\n    this._canvasWidth = 100;\r\n    this.$element = createElementFrom(`\r\n      <div class=\"match\">\r\n        <div class=\"match__side match__side--left\"></div>\r\n        <canvas class=\"match__middle\" width=\"${this._canvasWidth}\" height=\"0\"></canvas>\r\n        <div class=\"match__side match__side--right\"></div>\r\n      </div>\r\n    `);\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.$left = this.$element.querySelector(\".match__side--left\");\r\n    this.$right = this.$element.querySelector(\".match__side--right\");\r\n    /**\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.$middle = this.$element.querySelector(\".match__middle\");\r\n    this._selected = [null, null];\r\n\r\n    this._ctx = this.$middle.getContext(\"2d\");\r\n\r\n    /**\r\n     * @type {number[][]}\r\n     */\r\n    this._connections = [];\r\n\r\n    /**\r\n     * @typedef {{\r\n     *  value: string,\r\n     *  $element: HTMLElement,\r\n     *  $btn: HTMLButtonElement,\r\n     *  textField?: ULTextField}} _Item\r\n     */\r\n    /**\r\n     * @type {Array<_Item>}\r\n     */\r\n    this.left = [];\r\n    /**\r\n     * @type {Array<_Item>}\r\n     */\r\n    this.right = [];\r\n    this.editable = editable;\r\n\r\n    for (let item of left) {\r\n      this.addLeft(item);\r\n    }\r\n    for (let item of right) {\r\n      this.addRight(item);\r\n    }\r\n\r\n    this.connections = connections.map((c) => [...c]);\r\n\r\n    this.onNewConnection = ([_, __]) => {};\r\n    this.onRemoveConnection = ([_, __]) => {};\r\n    this.onRemove = ({ sideName, item }) => {};\r\n    this.onChange = ({ sideName, item }) => {};\r\n  }\r\n\r\n  _drawConnections() {\r\n    this._ctx.clearRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\r\n\r\n    for (const c of this._connections) {\r\n      if (!this.left[c[0]] || !this.right[c[1]]) {\r\n        continue;\r\n      }\r\n      const $lel = this.left[c[0]].$btn;\r\n      const $rel = this.right[c[1]].$btn;\r\n      const lbr = $lel.getBoundingClientRect();\r\n      const rbr = $rel.getBoundingClientRect();\r\n      const top = this.$middle.getBoundingClientRect().top;\r\n      const y1 = lbr.top + lbr.height / 2 - top;\r\n      const y2 = rbr.top + rbr.height / 2 - top;\r\n\r\n      this._ctx.lineWidth = 4;\r\n      this._ctx.strokeStyle = \"#00a8a8\";\r\n      this._ctx.beginPath();\r\n      this._ctx.moveTo(0, y1);\r\n      this._ctx.lineTo(this._ctx.canvas.width, y2);\r\n      this._ctx.stroke();\r\n\r\n      $lel.classList.add(\"match-button--active\");\r\n      $rel.classList.add(\"match-button--active\");\r\n\r\n      $lel.blur();\r\n      $rel.blur();\r\n    }\r\n  }\r\n\r\n  set connections(v) {\r\n    this._connections = v;\r\n    this._drawConnections();\r\n  }\r\n\r\n  get connections() {\r\n    return this._connections;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number[]} c\r\n   * @returns\r\n   */\r\n  addConnection(connection) {\r\n    this._removeConnectionHelper(connection);\r\n    this._connections.push([...connection]);\r\n    this.connections = this._connections;\r\n    this.onNewConnection([...connection]);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Array<number?>} connection\r\n   */\r\n  removeConnection(connection) {\r\n    const rc = this._removeConnectionHelper(connection);\r\n    this.connections = this._connections;\r\n    this.onRemoveConnection(rc);\r\n  }\r\n\r\n  _removeConnectionHelper(connection) {\r\n    let ret = [];\r\n    this._connections = this._connections.filter((c) => {\r\n      if (c[0] == connection[0] || c[1] == connection[1]) {\r\n        ret = [...c];\r\n        this.left[c[0]].$btn.classList.remove(\"match-button--active\");\r\n        this.right[c[1]].$btn.classList.remove(\"match-button--active\");\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} value\r\n   * @returns {_Item}\r\n   */\r\n  addLeft(value) {\r\n    return this._addToSide(value, \"left\");\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} value\r\n   * @returns {_Item}\r\n   */\r\n  addRight(value) {\r\n    return this._addToSide(value, \"right\");\r\n  }\r\n\r\n  removeLeft(idx) {\r\n    const removed = this._removeSide(idx, \"left\");\r\n    this.onRemove({ sideName: \"left\", removed });\r\n    return removed;\r\n  }\r\n\r\n  removeRight(idx) {\r\n    const removed = this._removeSide(idx, \"right\");\r\n    this.onRemove({ sideName: \"right\", removed });\r\n    return removed;\r\n  }\r\n\r\n  _removeSide(idx, sideName) {\r\n    let sideItems = this[sideName];\r\n    let ci = sideName == \"left\" ? 0 : 1;\r\n\r\n    this.removeConnection(sideName == \"left\" ? [idx, null] : [null, idx]);\r\n\r\n    for (const c of this._connections) {\r\n      if (c[ci] > idx) c[ci]--;\r\n    }\r\n\r\n    if (this._selected[ci] == idx) {\r\n      this._selected[ci] = null;\r\n    }\r\n\r\n    const removed = sideItems.splice(idx, 1)[0];\r\n    removed.$element.remove();\r\n    for (let i = idx; i < sideItems.length; i++) {\r\n      sideItems[i].key--;\r\n    }\r\n    this._adjustHeight();\r\n    return removed;\r\n  }\r\n\r\n  _addToSide(value, sideName) {\r\n    const $side = this[\"$\" + sideName];\r\n    const sideItems = this[sideName];\r\n    let [ci1, ci2] = sideName == \"left\" ? [0, 1] : [1, 0];\r\n\r\n    const newItem = {\r\n      key: sideItems.length,\r\n      value,\r\n      $element: createElementFrom(`\r\n        <div class=\"match-button__wrapper match-button__wrapper--${sideName}\">\r\n          <button class=\"match-button match-button--${sideName}\">\r\n            <div class=\"match-button__value\">${value}</div>\r\n          </button>\r\n          ${\r\n            this.editable\r\n              ? `<button type=\"button\" class=\"match-button__remove cross-btn secondary x-small\"></button>`\r\n              : \"\"\r\n          }\r\n        </div>\r\n      `),\r\n      $btn: null,\r\n    };\r\n    newItem.$btn = newItem.$element.querySelector(\".match-button\");\r\n    $side.appendChild(newItem.$element);\r\n    if (this.editable) {\r\n      newItem.textField = new ULTextField(\r\n        newItem.$btn.querySelector(\".match-button__value\"),\r\n        {\r\n          multiline: true,\r\n          disableEnter: true,\r\n          value,\r\n          placeholder: sideName.charAt(0).toUpperCase() + sideName.slice(1),\r\n          required: true,\r\n        }\r\n      );\r\n      newItem.textField.onInput = () => {\r\n        newItem.value = newItem.textField.value;\r\n        this._adjustHeight();\r\n        this.onChange({ sideName, item: newItem });\r\n      };\r\n      newItem.$element\r\n        .querySelector(\".match-button__remove\")\r\n        .addEventListener(\"click\", () => {\r\n          const r = this._removeSide(newItem.key, sideName);\r\n          this.onRemove({ item: r, sideName });\r\n        });\r\n    }\r\n\r\n    newItem.$btn.addEventListener(\"focus\", (e) => {\r\n      this._selected[ci1] = newItem.key;\r\n      this.removeConnection(\r\n        sideName == \"left\" ? [newItem.key, null] : [null, newItem.key]\r\n      );\r\n      if (this._selected[ci2] != null) {\r\n        this.addConnection([this._selected[0], this._selected[1]]);\r\n        this._selected = [null, null];\r\n      }\r\n    });\r\n    newItem.$btn.addEventListener(\"blur\", () => {\r\n      setTimeout(() => {\r\n        if (this._selected[ci1] == newItem.key) this._selected[ci1] = null;\r\n      }, 10);\r\n    });\r\n    this._adjustHeight();\r\n    sideItems.push(newItem);\r\n\r\n    return newItem;\r\n  }\r\n\r\n  _adjustHeight() {\r\n    this.$middle.height = 0;\r\n    this.$middle.height = this.$element.clientHeight;\r\n    this._drawConnections();\r\n  }\r\n\r\n  reportValidity() {\r\n    if (this.editable) {\r\n      let valid =\r\n        this.left.every((i) => i.textField.reportValidity()) &&\r\n        this.right.every((i) => i.textField.reportValidity());\r\n      if (valid && !this._connections.length) {\r\n        valid = false;\r\n        this.left[0].$btn.setCustomValidity(\r\n          \"There should be at least 1 connection\"\r\n        );\r\n        this.left[0].$btn.reportValidity();\r\n        this.left[0].$btn.scrollIntoView({\r\n          block: \"center\",\r\n          behavior: \"smooth\",\r\n        });\r\n      }\r\n      return valid;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { createElementFrom } from \"./utils\";\r\n\r\nexport class Progress {\r\n  /**\r\n   * \r\n   * @param {HTMLElement} $target \r\n   * @param {{value: number, total: number}} param1 \r\n   */\r\n  constructor($target, { value, total }) {\r\n    this._value = value;\r\n    this._total = total;\r\n\r\n    this.$element = createElementFrom(`\r\n    <div class=\"progress\">\r\n      <div class=\"progress__text\">\r\n      </div>\r\n      <div class=\"progress__bar\">\r\n      </div>\r\n    </div>\r\n  `);\r\n\r\n    this._updateProgress();\r\n    $target.replaceWith(this.$element);\r\n  }\r\n  set value(v) {\r\n    this._value = v;\r\n    this._updateProgress();\r\n  }\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set total(v) {\r\n    this._total = v;\r\n    this._updateProgress();\r\n  }\r\n  get total() {\r\n    return this._total;\r\n  }\r\n\r\n  _updateProgress() {\r\n    const $ptext = this.$element.querySelector(\".progress__text\");\r\n    const $pbar = this.$element.querySelector(\".progress__bar\");\r\n\r\n    $ptext.innerText = `${this.value} of ${this.total}`;\r\n    $pbar.innerHTML = \"\";\r\n\r\n    for (let i = 1; i <= this.value; i++) {\r\n      $pbar.append(\r\n        createElementFrom(\r\n          `<div class=\"progress__bit progress__bit--done\"></div>`\r\n        ),\r\n        createElementFrom(`<div class=\"spacex-1px\"></div>`)\r\n      );\r\n    }\r\n    for (let i = this.value + 1; i < this.total; i++) {\r\n      $pbar.append(\r\n        createElementFrom(`<div class=\"progress__bit\"></div>`),\r\n        createElementFrom(`<div class=\"spacex-1px\"></div>`)\r\n      );\r\n    }\r\n    if (this.value < this.total) {\r\n      $pbar.append(createElementFrom(`<div class=\"progress__bit\"></div>`));\r\n    }\r\n  }\r\n}\r\n","import { CheckList } from \"./check-list\";\r\nimport { Complete } from \"./complete\";\r\nimport { Match } from \"./match\";\r\nimport { Progress } from \"./progress\";\r\nimport { OLTextField, ULTextField } from \"./text-field\";\r\nimport { createElementFrom } from \"./utils\";\r\n\r\nexport class QuizSection {\r\n  /**\r\n   *\r\n   * @param {HTMLElement} $target\r\n   * @param {{progress: {value: number, total: number}}} param1\r\n   */\r\n  constructor($target, { quest, progress, onNext, onPrev, onFinish }) {\r\n    this.$element = createElementFrom(`\r\n      <div class=\"quiz-section\">\r\n        <div class=\"paper-4 quiz-section__wrapper\">\r\n          <div class=\"title primary\">\r\n            ${quest.title}\r\n          </div>\r\n          <div class=\"spacey-2\"></div>\r\n          <div class=\"subtitle\">\r\n            ${quest.question}\r\n          </div>\r\n          <div class=\"spacey-1\"></div>\r\n          <div class=\"quiz-section__content\"></div>\r\n          <div class=\"spacey-2\"></div>\r\n          <div class=\"space-between\">\r\n            <div class=\"progress\"></div>\r\n            <div class=\"quiz-section__buttons\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n    $target.replaceWith(this.$element);\r\n\r\n    this.$quizSectionWrap = this.$element.querySelector(\".quiz-section__wrapper\");\r\n    this.$buttonsContainer = this.$element.querySelector(\r\n      \".quiz-section__buttons\"\r\n    );\r\n\r\n    this.updateProgress(progress.value, progress.total);\r\n\r\n    this.onNext = onNext || (() => {});\r\n    this.onPrev = onPrev || (() => {});\r\n    this.onFinish = onFinish || (() => {});\r\n\r\n    this.$content = this.$element.querySelector(\".quiz-section__content\");\r\n\r\n    const typeHandlers = {\r\n      question: () => {\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($placeholder);\r\n        const input = new OLTextField($placeholder, {\r\n          value: quest.answer || \"\",\r\n          label: \"Your answer\",\r\n        });\r\n        input.onInput = () => {\r\n          quest.answer = input.value;\r\n        };\r\n      },\r\n      choose: (multiple) => {\r\n        const $form = document.createElement(\"form\");\r\n        $form.onsubmit = (e) => e.preventDefault();\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($form);\r\n        $form.appendChild($placeholder);\r\n\r\n        if (!quest.answers) quest.answers = [];\r\n\r\n        const checklist = new CheckList($placeholder, {\r\n          multiple,\r\n          items: quest.options.map((o, i) => ({\r\n            value: o,\r\n            checked: quest.answers.includes(i + 1),\r\n          })),\r\n        });\r\n\r\n        checklist.onChange = () => {\r\n          quest.answers = [];\r\n          checklist.items.forEach((i, idx) => {\r\n            if (i.checked) quest.answers.push(idx + 1);\r\n          });\r\n        };\r\n      },\r\n      \"choose one\": function () {\r\n        this.choose(false);\r\n      },\r\n      \"choose multiple\": function () {\r\n        this.choose(true);\r\n      },\r\n      complete: () => {\r\n        if (!quest.answers) quest.answers = {};\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.append($placeholder);\r\n        const complete = new Complete($placeholder, {\r\n          values: quest.answers,\r\n          text: quest.text,\r\n        });\r\n        complete.onInput = ({ id, value }) => {\r\n          quest.answers[id] = value;\r\n        };\r\n      },\r\n      match: () => {\r\n        if (!quest.answers) quest.answers = [];\r\n\r\n        const $placeholder = document.createElement(\"div\");\r\n        this.$content.appendChild($placeholder);\r\n\r\n        const match = new Match($placeholder, {\r\n          left: quest.left,\r\n          right: quest.right,\r\n          connections: quest.answers.map(([l, r]) => [l - 1, r - 1]),\r\n        });\r\n\r\n        match.onChange = match.onRemove = match.onNewConnection = match.onRemoveConnection = () => {\r\n          quest.left = match.left.map((i) => i.value);\r\n          quest.right = match.right.map((i) => i.value);\r\n          quest.answers = match.connections.map((c) => [c[0] + 1, c[1] + 1]);\r\n        };\r\n      },\r\n    };\r\n\r\n    typeHandlers[quest.type] && typeHandlers[quest.type]();\r\n  }\r\n\r\n  updateProgress(value, total) {\r\n    this.progress = new Progress(this.$element.querySelector(\".progress\"), {\r\n      value,\r\n      total,\r\n    });\r\n\r\n    this.$buttonsContainer.innerHTML = \"\";\r\n\r\n    let $prev;\r\n    let $next;\r\n    let $finish;\r\n\r\n    if (value > 1) {\r\n      this.$buttonsContainer.append(\r\n        ($prev = createElementFrom(\r\n          `<button class=\"text-button secondary\">prev</button>`\r\n        )),\r\n        createElementFrom(`<span class=\"spacex-1\"></span>`)\r\n      );\r\n    }\r\n\r\n    if (value < total) {\r\n      this.$buttonsContainer.appendChild(\r\n        ($next = createElementFrom(\r\n          `<button class=\"filled-button primary\">next</button>`\r\n        ))\r\n      );\r\n    }\r\n    if (value == total) {\r\n      this.$buttonsContainer.appendChild(\r\n        ($finish = createElementFrom(\r\n          `<button class=\"filled-button success\">finish</button>`\r\n        ))\r\n      );\r\n    }\r\n\r\n    if ($prev) $prev.addEventListener(\"click\", () => this.onPrev());\r\n    if ($next) $next.addEventListener(\"click\", () => this.onNext());\r\n    if ($finish) $finish.addEventListener(\"click\", () => this.onFinish());\r\n  }\r\n\r\n  remove() {\r\n    this.$element.remove();\r\n  }\r\n}\r\n","import { QuizSection } from \"./components/quiz-section\";\r\nimport { createElementFrom } from \"./components/utils\";\r\n\r\nlet quiz = {\r\n  name: \"My first quiz\",\r\n  quests: [\r\n    {\r\n      title: \"Answer the question\",\r\n      type: \"question\",\r\n      question:\r\n        \"What is the name of the first function called when executing a C++ program?\",\r\n      correctAnswers: [\"main\"],\r\n      answer: \"\",\r\n    },\r\n    {\r\n      title: \"Choose the right answer\",\r\n      type: \"choose one\",\r\n      question: \"What is the time complexity of 'Binary search'?\",\r\n      options: [\"O(1)\", \"O(n)\", \"O(log n)\", \"O(n log n)\"],\r\n      correctAnswers: [3],\r\n    },\r\n    {\r\n      title: \"Choose the right answers\",\r\n      type: \"choose multiple\",\r\n      question:\r\n        \"What may be the result of a sorting algorithm applied on an set of numbers?\",\r\n      options: [\r\n        \"[1, 4, 5, 3, 10, 14]\",\r\n        \"[55, 90, 91, 123, 241]\",\r\n        \"[62, 42, -1, -2, -99]\",\r\n      ],\r\n      correctAnswers: [2, 3],\r\n    },\r\n    {\r\n      title: \"Complete empty spaces\",\r\n      type: \"complete\",\r\n      question:\r\n        'Write a function named \"Hello\" that prints \"Hello world\" to the console and something more here',\r\n      text: `<pre>function <span><c id=\"1\" width=\"5\" /></span>() {\r\n  console.<span><c id=\"2\" width=\"3\"/></span>(<span><c id=\"3\" width=\"13\"/></span>);\r\n}</pre>`,\r\n      correctAnswers: {\r\n        1: \"Hello\",\r\n        2: \"log\",\r\n        3: '\"Hello world\"',\r\n      },\r\n    },\r\n    {\r\n      title: \"Match the sides\",\r\n      type: \"match\",\r\n      question: \"Match the size of given types\",\r\n      left: [\"int\", \"char\", \"short\"],\r\n      right: [\"8 bits\", \"16 bits\", \"32 bits\"],\r\n      correctAnswers: [\r\n        [1, 3],\r\n        [2, 1],\r\n        [3, 2],\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nfor (const q of quiz.quests) {\r\n  q.answer = null;\r\n  q.answers = null;\r\n}\r\n\r\nfunction main() {\r\n  const $quiz = document.querySelector(\"#quiz\");\r\n  function makeQuest(idx) {\r\n    const $placeholder = document.createElement(\"div\");\r\n    $quiz.innerHTML = \"\";\r\n    $quiz.appendChild($placeholder);\r\n    const ret = {\r\n      quizSection: new QuizSection($placeholder, {\r\n        progress: {\r\n          value: idx + 1,\r\n          total: quiz.quests.length,\r\n        },\r\n        quest: quiz.quests[idx],\r\n        onPrev: () => {\r\n          if (current.questIdx > 0) {\r\n            current = makeQuest(current.questIdx - 1);\r\n          }\r\n        },\r\n        onNext: () => {\r\n          if (current.questIdx < quiz.quests.length - 1) {\r\n            current = makeQuest(current.questIdx + 1);\r\n          }\r\n        },\r\n      }),\r\n      questIdx: idx,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  let current = makeQuest(0);\r\n}\r\n\r\nmain();\r\n"],"names":["$cf03c596b39fdafb$var$getRandomValues","$cf03c596b39fdafb$var$rnds8","Uint8Array","crypto","getRandomValues","bind","msCrypto","Error","$e28e0a9f59d773c1$export$9099ad97b570f7c","$5d705b3b5f8e0553$export$9099ad97b570f7c","uuid","test","$263b4193969d4381$var$byteToHex","$263b4193969d4381$var$i","push","toString","substr","$2c0cc5297ac262a5$var$_nodeId","$2c0cc5297ac262a5$var$_clockseq","$263b4193969d4381$export$9099ad97b570f7c","arr","offset","arguments","length","undefined","toLowerCase","TypeError","$2c0cc5297ac262a5$var$_lastMSecs","$2c0cc5297ac262a5$var$_lastNSecs","$2c0cc5297ac262a5$export$9099ad97b570f7c","options","buf","i","b","Array","node","clockseq","seedBytes","random","rng","$cf03c596b39fdafb$export$9099ad97b570f7c","msecs","Date","now","nsecs","dt","tl","tmh","n","$ca47f7f7fd487500$export$cab8b431230e3cbf","str","template","document","createElement","trim","innerHTML","content","firstChild","$ca47f7f7fd487500$export$ae2c756080811818","$47f9f2970f891f0c$var$TextFieldBase","$target","$element","required","placeholder","value","this","$input","querySelector","addEventListener","classList","add","remove","onBlur","multiline","_resize","onInput","replaceWith","v","focus","scrollIntoView","block","behavior","blur","valid","reportValidity","$target1","placeholder1","value1","label","required1","super","$target2","placeholder2","value2","required2","disableEnter","$6a5dfe203ab82f54$export$a54534a7e235cb68","name","multiple","items","editable","onChange","onRemove","checked","type","key","textField","newItem","appendChild","$47f9f2970f891f0c$export$18609da8f74e23c4","removeItem","$4e1b9f63865c22f7$export$2527079008de4ef7","text","text1","values","values1","_disabled","disabled","setText","$content","querySelectorAll","forEach","c","getAttribute","id","w","$span","style","position","innerText","repeat","fontSize","$inp","fontFamily","body","width","clientWidth","whiteSpace","wordWrap","$7452e99eb1b56a37$export$77bc00d5f38e2f53","left","right","connections","_canvasWidth","$left","$right","$middle","_selected","_connections","item","addLeft","item1","addRight","map","_","__","sideName","item2","_drawConnections","_ctx","clearRect","canvas","height","$lel","$btn","$rel","getBoundingClientRect","rbr","top","y1","lbr","y2","lineWidth","beginPath","moveTo","lineTo","connection","_removeConnectionHelper","onNewConnection","rc","ret","filter","_addToSide","idx","removed","_removeSide","ci","sideItems","splice","_adjustHeight","ci1","ci2","charAt","toUpperCase","slice","r","e","removeConnection","addConnection","$aacbc485d1de4e5b$export$e7a43eed726b8919","total","_value","_total","_updateProgress","$ptext","$pbar","$5a4d627eb74bd178$export$462bc4073fc1ad9c","quest","progress","onNext","onPrev","onFinish","title","question","$quizSectionWrap","$buttonsContainer","updateProgress","$placeholder","input","$47f9f2970f891f0c$export$a1fb39f8e08183ac","answer","$form","onsubmit","preventDefault","answers","includes","checklist","choose","match","typeHandlers","$prev","$next","$finish","$832fe1676c48ccb0$var$quiz","quests","correctAnswers","q","$quiz","current","makeQuest","quizSection","questIdx","$832fe1676c48ccb0$var$main"],"version":3,"file":"quiz.440fe70c.js.map"}